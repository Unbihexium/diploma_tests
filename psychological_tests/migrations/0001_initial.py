# Generated by Django 3.2.4 on 2021-06-20 02:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserExtended',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmotionalBurnoutQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(max_length=5000, verbose_name='Текст вопроса')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmotionalBurnoutResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_uuid', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='UUID результата (совпадает с UUID теста)')),
                ('traumatic_circumstance', models.PositiveIntegerField(verbose_name='Переживание психотравмирующих обстоятельств')),
                ('self_dissatisfaction', models.PositiveIntegerField(verbose_name='Неудовлетворенность собой')),
                ('caged', models.PositiveIntegerField(verbose_name='Загнанност в клетку')),
                ('depression', models.PositiveIntegerField(verbose_name='Тревога и депрессия')),
                ('inappropriate_response', models.PositiveIntegerField(verbose_name='Неадекватное избирательное эмоциональное реагирование')),
                ('emotional_disorientation', models.PositiveIntegerField(verbose_name='Эмоционально-нравственная дизориентация')),
                ('emotion_economy', models.PositiveIntegerField(verbose_name='Расширение сферы экономии эмоций')),
                ('professional_duties_reduction', models.PositiveIntegerField(verbose_name='Редукция сферы экономии эмоций')),
                ('emotional_deficit', models.PositiveIntegerField(verbose_name='Эмоциональный дефицит')),
                ('emotional_detachment', models.PositiveIntegerField(verbose_name='Эмоциональная отстраненность')),
                ('personal_detachment', models.PositiveIntegerField(verbose_name='Личная отстраненность (деперсонализация)')),
                ('psychosomatic_and_psychovegetative_disorders', models.PositiveIntegerField(verbose_name='Психосоматические и психовегетативные нарушения')),
            ],
        ),
        migrations.CreateModel(
            name='PSM25Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(max_length=5000, verbose_name='Текст вопроса')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PSM25TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(verbose_name='')),
                ('result_uuid', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='UUID результата (совпадает с UUID теста)')),
            ],
        ),
        migrations.CreateModel(
            name='TailorQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(max_length=5000, verbose_name='Текст вопроса')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TailorTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(verbose_name='')),
                ('result_uuid', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='UUID результата (совпадает с UUID теста)')),
            ],
        ),
        migrations.CreateModel(
            name='UserTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.PositiveBigIntegerField(choices=[(0, 'PSM25 test'), (1, 'Tailor test'), (2, 'Emotional Burnout test')], verbose_name='Тип теста')),
                ('finished', models.BooleanField(default=False, verbose_name='Попытка завершена')),
                ('test_uuid', models.UUIDField(default=uuid.uuid4, verbose_name='UUID попытки теста')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField(default=0, verbose_name='Текст ответа')),
                ('question_number', models.PositiveIntegerField(verbose_name='Номер вопроса')),
                ('test_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='psychological_tests.usertest', verbose_name='Запись теста')),
            ],
        ),
    ]
